var searchIndex = JSON.parse('{\
"imxrt_dma":{"doc":"Direct Memory Access (DMA) driver for i.MX RT processors","i":[[0,"memcpy","imxrt_dma","DMA-powered memcpy",null,null],[3,"Memcpy","imxrt_dma::memcpy","A memcpy operation",null,null],[5,"memcpy","","Perform a DMA-powered <code>memcpy</code> between the <code>source</code> and …",null,[[["channel",3]],["memcpy",3]]],[0,"peripheral","imxrt_dma","DMA support for hardware peripherals",null,null],[8,"Source","imxrt_dma::peripheral","A peripheral that can be the source of DMA data",null,null],[10,"source_signal","","Peripheral source request signal",0,[[]]],[10,"source_address","","Returns a pointer to the register from which the DMA …",0,[[]]],[10,"enable_source","","Perform any actions necessary to enable DMA transfers",0,[[]]],[10,"disable_source","","Perform any actions necessary to disable or cancel DMA …",0,[[]]],[8,"Destination","","A peripheral that can be the destination for DMA data",null,null],[10,"destination_signal","","Peripheral destination request signal",1,[[]]],[10,"destination_address","","Returns a pointer to the register into which the DMA …",1,[[]]],[10,"enable_destination","","Perform any actions necessary to enable DMA transfers",1,[[]]],[10,"disable_destination","","Perform any actions necessary to disable or cancel DMA …",1,[[]]],[3,"Rx","","A DMA transfer that receives data from hardware",null,null],[5,"receive","","Use a DMA channel to receive a <code>buffer</code> of elements from …",null,[[["channel",3]],["rx",3]]],[3,"Tx","","A DMA transfer that sends data to hardware",null,null],[5,"transfer","","Use a DMA channel to send a <code>buffer</code> of data to the …",null,[[["channel",3]],["tx",3]]],[8,"Bidirectional","","Indicates that a peripheral can read and write from a …",null,null],[3,"FullDuplex","","A full-duplex DMA transfer from a single buffer",null,null],[5,"full_duplex","","Perform a full-suplex DMA transfer using two DMA channels …",null,[[["channel",3]],["fullduplex",3]]],[3,"Channel","imxrt_dma","A DMA channel",null,null],[4,"ChannelConfiguration","","DMAMUX channel configuration",null,null],[13,"Off","","The DMAMUX channel is disabled",2,null],[13,"Enable","","The DMAMUX is enabled, permitting hardware triggering. …",2,null],[12,"source","imxrt_dma::ChannelConfiguration","The DMA channel source (slot number)",3,null],[12,"periodic","","Set the periodic triggering flag to schedule DMA …",3,null],[13,"AlwaysOn","imxrt_dma","The DMAMUX is always on, and there\'s no need for software …",2,null],[8,"Element","","Describes a transferrable DMA element; basically, an …",null,null],[18,"DATA_TRANSFER_ID","","An identifier describing the data transfer size",4,null],[3,"Error","","A wrapper around a DMA error status value",null,null],[5,"on_error","","Handle a DMA error on one or more channels",null,[[]]],[5,"on_interrupt","","Handle a DMA interrupt",null,[[]]],[3,"Transfer","","The core DMA transfer future",null,null],[4,"BandwidthControl","","Throttles the amount of bus bandwidth consumed by the eDMA",null,null],[13,"Stall4Cycles","","DMA engine stalls for 4 cycles after each R/W.",5,null],[13,"Stall8Cycles","","DMA engine stalls for 8 cycles after each R/W.",5,null],[6,"Result","","A DMA result",null,null],[5,"set_source_hardware","","Set a hardware peripheral as the source for a DMA transfer",null,[[["channel",3]]]],[5,"set_destination_hardware","","Set a hardware peripheral as the destination for a DMA …",null,[[["channel",3]]]],[5,"set_source_linear_buffer","","Set a linear buffer as the source for a DMA transfer",null,[[["channel",3]]]],[5,"set_destination_linear_buffer","","Set a linear buffer as the destination for a DMA transfer",null,[[["channel",3]]]],[5,"set_source_circular_buffer","","Set a circular buffer as the source for a DMA transfer",null,[[["channel",3]]]],[5,"set_destination_circular_buffer","","Set a circular buffer as the destination for a DMA …",null,[[["channel",3]]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"into_future","","",8,[[]]],[11,"from","imxrt_dma::memcpy","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"into_future","","",9,[[]]],[11,"from","imxrt_dma::peripheral","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"into_future","","",10,[[]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"into_future","","",11,[[]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"into_future","","",12,[[]]],[11,"from","imxrt_dma","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"eq","","",2,[[["channelconfiguration",4]]]],[11,"ne","","",2,[[["channelconfiguration",4]]]],[11,"eq","","",5,[[["bandwidthcontrol",4]]]],[11,"drop","","",8,[[]]],[11,"drop","imxrt_dma::peripheral","",10,[[]]],[11,"drop","","",11,[[]]],[11,"drop","","",12,[[]]],[11,"clone","imxrt_dma","",2,[[],["channelconfiguration",4]]],[11,"clone","","",7,[[],["error",3]]],[11,"clone","","",5,[[],["bandwidthcontrol",4]]],[11,"poll","","",8,[[["pin",3],["context",3]],["poll",4]]],[11,"poll","imxrt_dma::memcpy","",9,[[["pin",3],["context",3]],["poll",4]]],[11,"poll","imxrt_dma::peripheral","",10,[[["pin",3],["context",3]],["poll",4]]],[11,"poll","","",11,[[["pin",3],["context",3]],["poll",4]]],[11,"poll","","",12,[[["pin",3],["context",3]],["poll",4]]],[11,"new","imxrt_dma","Creates the DMA channel described by <code>index</code>",6,[[]]],[11,"enable","","Enable the DMA channel for transfers",6,[[]]],[11,"channel","","Returns the DMA channel number",6,[[]]],[11,"set_bandwidth_control","","Set the channel\'s bandwidth control",6,[[["option",4],["bandwidthcontrol",4]]]],[11,"reset","","Reset the transfer control descriptor owned by the DMA …",6,[[]]],[11,"set_source_address","","Set the source address for a DMA transfer",6,[[]]],[11,"set_source_offset","","Set the source offset <em>in bytes</em>",6,[[]]],[11,"set_destination_address","","Set the destination address for a DMA transfer",6,[[]]],[11,"set_destination_offset","","Set the destination offset <em>in bytes</em>",6,[[]]],[11,"set_source_attributes","","Set the transfer attributes for the source",6,[[]]],[11,"set_source_last_address_adjustment","","Set the source last address adjustment <em>in bytes</em>",6,[[]]],[11,"set_destination_last_address_adjustment","","Set the destination last addrss adjustment <em>in bytes</em>",6,[[]]],[11,"set_destination_attributes","","Set the transfer attributes for the destination",6,[[]]],[11,"set_minor_loop_bytes","","Set the number of <em>bytes</em> to transfer per minor loop",6,[[]]],[11,"set_transfer_iterations","","Tells the DMA channel how many transfer iterations to …",6,[[]]],[11,"set_channel_configuration","","Set the DMAMUX channel configuration",6,[[["channelconfiguration",4]]]],[11,"is_hardware_signaling","","Returns <code>true</code> if the DMA channel is receiving a service …",6,[[]]],[11,"disable","","Disable the DMA channel, preventing any DMA transfers",6,[[]]],[11,"is_interrupt","","Returns <code>true</code> if this DMA channel generated an interrupt",6,[[]]],[11,"clear_interrupt","","Clear the interrupt flag from this DMA channel",6,[[]]],[11,"set_disable_on_completion","","Enable or disable \'disable on completion\'",6,[[]]],[11,"set_interrupt_on_completion","","Enable or disable interrupt generation when the transfer …",6,[[]]],[11,"is_complete","","Indicates if the DMA transfer has completed",6,[[]]],[11,"clear_complete","","Clears completion indication",6,[[]]],[11,"is_error","","Indicates if the DMA channel is in an error state",6,[[]]],[11,"clear_error","","Clears the error flag",6,[[]]],[11,"is_active","","Indicates if this DMA channel is actively transferring …",6,[[]]],[11,"is_enabled","","Indicates if this DMA channel is enabled",6,[[]]],[11,"error_status","","Returns the value from the <strong>global</strong> error status register",6,[[],["error",3]]],[11,"start","","Start a DMA transfer",6,[[]]],[11,"enable","","Enable the channel without triggering",2,[[]]],[18,"DATA_TRANSFER_ID","","An identifier describing the data transfer size",4,null],[11,"raw","","Returns the raw error status value",7,[[]]],[11,"is_valid","","Logical OR of all DMA channel error status bits",7,[[]]],[11,"is_cancelled","","Indicates if the transfer was cancelled",7,[[]]],[11,"is_group_priority","","Indicates a group priority error",7,[[]]],[11,"is_channel_priority","","Indicates a channel priority error",7,[[]]],[11,"channel_number","","Indicates the channel number",7,[[]]],[11,"is_source_address","","Indicates a source address error",7,[[]]],[11,"is_source_offset","","Indicates a source offset error",7,[[]]],[11,"is_destination_address","","Indicates a destination address error",7,[[]]],[11,"is_destination_offset","","Indicates a destination offset error",7,[[]]],[11,"is_loop_configuration","","Indicates a minor / major loop configuration error",7,[[]]],[11,"is_scatter_gather","","Indicates a scatter / gather configuration error",7,[[]]],[11,"is_source_bus","","Indicates a source bus error",7,[[]]],[11,"is_destination_bus","","Indicates a destination bus error",7,[[]]],[11,"new","","Create a new <code>Transfer</code> that performs the DMA transfer …",8,[[["channel",3]]]]],"p":[[8,"Source"],[8,"Destination"],[4,"ChannelConfiguration"],[13,"Enable"],[8,"Element"],[4,"BandwidthControl"],[3,"Channel"],[3,"Error"],[3,"Transfer"],[3,"Memcpy"],[3,"Rx"],[3,"Tx"],[3,"FullDuplex"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);