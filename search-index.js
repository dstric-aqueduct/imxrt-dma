var searchIndex = JSON.parse('{\
"imxrt_dma":{"doc":"Direct Memory Access (DMA) driver for i.MX RT processors","t":[4,18,18,8,3,6,13,13,3,5,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,5,5,0,11,5,11,11,11,11,11,11,11,11,11,11,13,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,11,11,11,11,11,11,5,5,11,5,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,5,11,11,11,11,8,8,3,3,8,3,11,11,11,11,11,11,10,10,10,10,11,11,11,10,10,11,11,11,5,11,11,11,11,11,11,11,11,11,5,10,10,5,11,11,11,11,11,11,11,11,11],"n":["BandwidthControl","DATA_TRANSFER_ID","DATA_TRANSFER_ID","Element","Error","Result","Stall4Cycles","Stall8Cycles","Transfer","block","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","channel","channel_number","clone","clone","drop","eq","fmt","fmt","fmt","from","from","from","into","into","into","into_future","is_cancelled","is_channel_priority","is_destination_address","is_destination_bus","is_destination_offset","is_group_priority","is_loop_configuration","is_scatter_gather","is_source_address","is_source_bus","is_source_offset","is_valid","memcpy","new","on_error","on_interrupt","peripheral","poll","poll_no_wake","raw","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AlwaysOn","Channel","Configuration","Enable","Off","borrow","borrow","borrow_mut","borrow_mut","channel","clear_complete","clear_error","clear_interrupt","clone","disable","enable","enable","eq","error_status","fmt","from","from","into","into","is_active","is_complete","is_enabled","is_error","is_hardware_signaling","is_interrupt","ne","new","reset","set_bandwidth_control","set_channel_configuration","set_destination_address","set_destination_attributes","set_destination_circular_buffer","set_destination_hardware","set_destination_last_address_adjustment","set_destination_linear_buffer","set_destination_offset","set_disable_on_completion","set_interrupt_on_completion","set_minor_loop_bytes","set_source_address","set_source_attributes","set_source_circular_buffer","set_source_hardware","set_source_last_address_adjustment","set_source_linear_buffer","set_source_offset","set_transfer_iterations","start","try_from","try_from","try_into","try_into","type_id","type_id","periodic","source","Memcpy","borrow","borrow_mut","from","into","into_future","memcpy","poll","try_from","try_into","type_id","Bidirectional","Destination","FullDuplex","Rx","Source","Tx","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","destination_address","destination_signal","disable_destination","disable_source","drop","drop","drop","enable_destination","enable_source","from","from","from","full_duplex","into","into","into","into_future","into_future","into_future","poll","poll","poll","receive","source_address","source_signal","transfer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["imxrt_dma","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","imxrt_dma::channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","imxrt_dma::channel::Configuration","","imxrt_dma::memcpy","","","","","","","","","","","imxrt_dma::peripheral","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Throttles the amount of bus bandwidth consumed by the eDMA","An identifier describing the data transfer size","An identifier describing the data transfer size","Describes a transferrable DMA element; basically, an …","A wrapper around a DMA error status value","A DMA result","DMA engine stalls for 4 cycles after each R/W.","DMA engine stalls for 8 cycles after each R/W.","The core DMA transfer future","Block until the future returns a result.","","","","","","","DMA channels","Indicates the channel number","","","","","","","","","","","","","","","Indicates if the transfer was cancelled","Indicates a channel priority error","Indicates a destination address error","Indicates a destination bus error","Indicates a destination offset error","Indicates a group priority error","Indicates a minor / major loop configuration error","Indicates a scatter / gather configuration error","Indicates a source address error","Indicates a source bus error","Indicates a source offset error","Logical OR of all DMA channel error status bits","DMA-powered memcpy","Create a new <code>Transfer</code> that performs the DMA transfer …","Handle a DMA error on one or more channels","Handle a DMA interrupt","DMA support for hardware peripherals","","Poll a future with a dummy waker.","Returns the raw error status value","","","","","","","","","","The DMAMUX is always on, and there’s no need for …","A DMA channel","DMAMUX channel configuration","The DMAMUX is enabled, permitting hardware triggering. …","The DMAMUX channel is disabled","","","","","Returns the DMA channel number","Clears completion indication","Clears the error flag","Clear the interrupt flag from this DMA channel","","Disable the DMA channel, preventing any DMA transfers","Enable the DMA channel for transfers","Enable the channel without triggering","","Returns the value from the <strong>global</strong> error status register","","","","","","Indicates if this DMA channel is actively transferring …","Indicates if the DMA transfer has completed","Indicates if this DMA channel is enabled","Indicates if the DMA channel is in an error state","Returns <code>true</code> if the DMA channel is receiving a service …","Returns <code>true</code> if this DMA channel generated an interrupt","","Creates the DMA channel described by <code>index</code>","Reset the transfer control descriptor owned by the DMA …","Set the channel’s bandwidth control","Set the DMAMUX channel configuration","Set the destination address for a DMA transfer","Set the transfer attributes for the destination","Set a circular buffer as the destination for a DMA …","Set a hardware peripheral as the destination for a DMA …","Set the destination last addrss adjustment <em>in bytes</em>","Set a linear buffer as the destination for a DMA transfer","Set the destination offset <em>in bytes</em>","Enable or disable ‘disable on completion’","Enable or disable interrupt generation when the transfer …","Set the number of <em>bytes</em> to transfer per minor loop","Set the source address for a DMA transfer","Set the transfer attributes for the source","Set a circular buffer as the source for a DMA transfer","Set a hardware peripheral as the source for a DMA transfer","Set the source last address adjustment <em>in bytes</em>","Set a linear buffer as the source for a DMA transfer","Set the source offset <em>in bytes</em>","Tells the DMA channel how many transfer iterations to …","Start a DMA transfer","","","","","","","Set the periodic triggering flag to schedule DMA …","The DMA channel source (slot number)","A memcpy operation","","","","","","Perform a DMA-powered <code>memcpy</code> between the <code>source</code> and …","","","","","Indicates that a peripheral can read and write from a …","A peripheral that can be the destination for DMA data","A full-duplex DMA transfer from a single buffer","A DMA transfer that receives data from hardware","A peripheral that can be the source of DMA data","A DMA transfer that sends data to hardware","","","","","","","Returns a pointer to the register into which the DMA …","Peripheral destination request signal","Perform any actions necessary to disable or cancel DMA …","Perform any actions necessary to disable or cancel DMA …","","","","Perform any actions necessary to enable DMA transfers","Perform any actions necessary to enable DMA transfers","","","","Perform a full-suplex DMA transfer using two DMA channels …","","","","","","","","","","Use a DMA channel to receive a <code>buffer</code> of elements from …","Returns a pointer to the register from which the DMA …","Peripheral source request signal","Use a DMA channel to send a <code>buffer</code> of data to the …","","","","","","","","",""],"i":[0,1,1,0,0,0,2,2,0,0,3,4,2,3,4,2,0,4,4,2,3,2,4,4,2,3,4,2,3,4,2,3,4,4,4,4,4,4,4,4,4,4,4,4,0,3,0,0,0,3,0,4,3,4,2,3,4,2,3,4,2,5,0,0,5,5,6,5,6,5,6,6,6,6,5,6,6,5,5,6,5,6,5,6,5,6,6,6,6,6,6,5,6,6,6,6,6,6,0,0,6,0,6,6,6,6,6,6,0,0,6,0,6,6,6,6,5,6,5,6,5,7,7,0,8,8,8,8,8,0,8,8,8,8,0,0,0,0,0,0,9,10,11,9,10,11,12,12,12,13,9,10,11,12,13,9,10,11,0,9,10,11,9,10,11,9,10,11,0,13,13,0,9,10,11,9,10,11,9,10,11],"f":[null,null,null,null,null,null,null,null,null,[[["pin",3]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["u32",15]],[[],["error",3]],[[],["bandwidthcontrol",4]],[[]],[[["bandwidthcontrol",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["channel",3]]],[[["usize",15]]],[[["usize",15]]],null,[[["context",3],["pin",3]],["poll",4]],[[["pin",3]],["poll",4]],[[],["u32",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["configuration",4]],[[]],[[]],[[["u32",15]]],[[["configuration",4]],["bool",15]],[[],["error",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["configuration",4]],["bool",15]],[[["usize",15]]],[[]],[[["option",4],["bandwidthcontrol",4]]],[[["configuration",4]]],[[]],[[["u8",15]]],[[["channel",3]]],[[["channel",3]]],[[["i32",15]]],[[["channel",3]]],[[["i16",15]]],[[["bool",15]]],[[["bool",15]]],[[["u32",15]]],[[]],[[["u8",15]]],[[["channel",3]]],[[["channel",3]]],[[["i32",15]]],[[["channel",3]]],[[["i16",15]]],[[["u16",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[["channel",3]],["memcpy",3]],[[["context",3],["pin",3]],["poll",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["channel",3]],["fullduplex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["context",3],["pin",3]],["poll",4]],[[["context",3],["pin",3]],["poll",4]],[[["context",3],["pin",3]],["poll",4]],[[["channel",3]],["rx",3]],[[]],[[],["u32",15]],[[["channel",3]],["tx",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[8,"Element"],[4,"BandwidthControl"],[3,"Transfer"],[3,"Error"],[4,"Configuration"],[3,"Channel"],[13,"Enable"],[3,"Memcpy"],[3,"Rx"],[3,"Tx"],[3,"FullDuplex"],[8,"Destination"],[8,"Source"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};